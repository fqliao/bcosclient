package org.bcosliteclient;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.bcos.channel.client.TransactionSucCallback;
import org.bcos.web3j.abi.EventEncoder;
import org.bcos.web3j.abi.EventValues;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.DynamicArray;
import org.bcos.web3j.abi.datatypes.Event;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.bcos.web3j.abi.datatypes.generated.Int256;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.bcos.web3j.protocol.core.methods.request.EthFilter;
import org.bcos.web3j.protocol.core.methods.response.Log;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class OkAMDB extends Contract {
    private static String BINARY = "606060405234156200000d57fe5b5b6000600060006001600060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506402540be4006000600101819055506002600260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060026001018190555061100192508273ffffffffffffffffffffffffffffffffffffffff166356004b6a6000604051602001526040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845260048152602001807f745f6f6b000000000000000000000000000000000000000000000000000000008152506020018481038352600b8152602001807f66726f6d5f6163636f7574000000000000000000000000000000000000000000815250602001848103825260218152602001807f66726f6d5f62616c616e63652c746f5f6163636f75742c746f5f62616c616e6381526020017f65000000000000000000000000000000000000000000000000000000000000008152506040019350505050602060405180830381600087803b1515620001fb57fe5b6102c65a03f115156200020a57fe5b505050604051805190505061100192508273ffffffffffffffffffffffffffffffffffffffff1663c184e0ff6000604051602001526040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f745f6f6b00000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1515620002c057fe5b6102c65a03f11515620002cf57fe5b5050506040518051905091508173ffffffffffffffffffffffffffffffffffffffff166313db93466000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b15156200034857fe5b6102c65a03f115156200035757fe5b5050506040518051905090508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600b8152602001807f66726f6d5f6163636f7574000000000000000000000000000000000000000000815250602001838103825260038152602001807f307831000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15156200043957fe5b6102c65a03f115156200044857fe5b5050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba746402540be4006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600c8152602001807f66726f6d5f62616c616e6365000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1515620004f557fe5b6102c65a03f115156200050457fe5b5050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260098152602001807f746f5f6163636f75740000000000000000000000000000000000000000000000815250602001838103825260038152602001807f307832000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1515620005dd57fe5b6102c65a03f11515620005ec57fe5b5050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba7460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600a8152602001807f746f5f62616c616e63650000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15156200069557fe5b6102c65a03f11515620006a457fe5b5050505b5050505b61119f80620006bc6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636d4ce63c14610051578063abe181b514610077578063fcd7e3c1146100da575bfe5b341561005957fe5b610061610243565b6040518082815260200191505060405180910390f35b341561007f57fe5b6100d8600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610251565b005b34156100e257fe5b610132600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506108be565b6040518080602001806020018060200184810384528781815181526020019150805190602001906020028083836000831461018c575b80518252602083111561018c57602082019150602081019050602083039250610168565b5050509050018481038352868181518152602001915080519060200190602002808383600083146101dc575b8051825260208311156101dc576020820191506020810190506020830392506101b8565b50505090500184810382528581815181526020019150805190602001906020028083836000831461022c575b80518252602083111561022c57602082019150602081019050602083039250610208565b505050905001965050505050505060405180910390f35b600060026001015490505b90565b600060006000600084600060010154036000600101819055508460026001016000828254019250508190555061100193508373ffffffffffffffffffffffffffffffffffffffff1663c184e0ff6000604051602001526040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f745f6f6b00000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b151561032757fe5b6102c65a03f1151561033557fe5b5050506040518051905092508273ffffffffffffffffffffffffffffffffffffffff166313db93466000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b15156103ad57fe5b6102c65a03f115156103bb57fe5b5050506040518051905091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600b8152602001807f66726f6d5f6163636f7574000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360008314610496575b80518252602083111561049657602082019150602081019050602083039250610472565b505050905090810190601f1680156104c25780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15156104de57fe5b6102c65a03f115156104ec57fe5b5050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba746000600101546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600c8152602001807f66726f6d5f62616c616e6365000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b151561059857fe5b6102c65a03f115156105a657fe5b5050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260098152602001807f746f5f6163636f75740000000000000000000000000000000000000000000000815250602001838103825260038152602001807f307832000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b151561067e57fe5b6102c65a03f1151561068c57fe5b5050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba746002600101546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600a8152602001807f746f5f62616c616e63650000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b151561073857fe5b6102c65a03f1151561074657fe5b5050508273ffffffffffffffffffffffffffffffffffffffff166331afac3687846000604051602001526040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182810382528481815181526020019150805190602001908083836000831461081c575b80518252602083111561081c576020820191506020810190506020830392506107f8565b505050905090810190601f1680156108485780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b151561086457fe5b6102c65a03f1151561087257fe5b5050506040518051905090507f66f7705280112a4d1145399e0414adc43a2d6974b487710f417edcf7d4a39d71816040518082815260200191505060405180910390a15b505050505050565b6108c661114b565b6108ce61115f565b6108d661114b565b60006000600060006108e661114b565b6108ee61115f565b6108f661114b565b6000600061100198508873ffffffffffffffffffffffffffffffffffffffff1663c184e0ff6000604051602001526040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f745f6f6b00000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15156109a457fe5b6102c65a03f115156109b257fe5b5050506040518051905097508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610a2a57fe5b6102c65a03f11515610a3857fe5b5050506040518051905096508773ffffffffffffffffffffffffffffffffffffffff1663e8434e398e896000604051602001526040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360008314610b17575b805182526020831115610b1757602082019150602081019050602083039250610af3565b505050905090810190601f168015610b435780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1515610b5f57fe5b6102c65a03f11515610b6d57fe5b5050506040518051905095508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610be557fe5b6102c65a03f11515610bf357fe5b50505060405180519050604051805910610c0a5750595b908082528060200260200182016040525b5094508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610c8a57fe5b6102c65a03f11515610c9857fe5b50505060405180519050604051805910610caf5750595b908082528060200260200182016040525b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610d2f57fe5b6102c65a03f11515610d3d57fe5b50505060405180519050604051805910610d545750595b908082528060200260200182016040525b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610dd957fe5b6102c65a03f11515610de757fe5b50505060405180519050821215611131578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1515610e6c57fe5b6102c65a03f11515610e7a57fe5b5050506040518051905090508073ffffffffffffffffffffffffffffffffffffffff166327314f796000604051602001526040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f66726f6d5f6163636f7574000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1515610f2b57fe5b6102c65a03f11515610f3957fe5b505050604051805190508583815181101515610f5157fe5b9060200190602002019060001916908160001916815250508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6000604051602001526040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600c8152602001807f66726f6d5f62616c616e63650000000000000000000000000000000000000000815250602001915050602060405180830381600087803b151561100e57fe5b6102c65a03f1151561101c57fe5b50505060405180519050848381518110151561103457fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff166327314f796000604051602001526040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f746f5f6163636f75740000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15156110e757fe5b6102c65a03f115156110f557fe5b50505060405180519050838381518110151561110d57fe5b9060200190602002019060001916908160001916815250505b816001019150610d6d565b8484849b509b509b505b5050505050505050509193909250565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820f1e5aa960b93196c38131e1b011a101553ab43f29bae8aa913d7af1ec589abfa0029";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_accout\",\"type\":\"string\"},{\"name\":\"num\",\"type\":\"int256\"}],\"name\":\"trans\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from_accout\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"insertResult\",\"type\":\"event\"}]";

    private OkAMDB(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, isInitByName);
    }

    private OkAMDB(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, isInitByName);
    }

    private OkAMDB(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    private OkAMDB(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public static List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("insertResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.count = (Int256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InsertResultEventResponse> insertResultEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("insertResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InsertResultEventResponse>() {
            @Override
            public InsertResultEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InsertResultEventResponse typedResponse = new InsertResultEventResponse();
                typedResponse.count = (Int256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Future<Int256> get() {
        Function function = new Function("get", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> trans(Utf8String from_accout, Int256 num) {
        Function function = new Function("trans", Arrays.<Type>asList(from_accout, num), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void trans(Utf8String from_accout, Int256 num, TransactionSucCallback callback) {
        Function function = new Function("trans", Arrays.<Type>asList(from_accout, num), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<List<Type>> select(Utf8String from_accout) {
        Function function = new Function("select", 
                Arrays.<Type>asList(from_accout), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public static Future<OkAMDB> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(OkAMDB.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<OkAMDB> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(OkAMDB.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static OkAMDB load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OkAMDB(contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    public static OkAMDB load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OkAMDB(contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public static OkAMDB loadByName(String contractName, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OkAMDB(contractName, web3j, credentials, gasPrice, gasLimit, true);
    }

    public static OkAMDB loadByName(String contractName, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OkAMDB(contractName, web3j, transactionManager, gasPrice, gasLimit, true);
    }

    public static class InsertResultEventResponse {
        public Int256 count;
    }
}
