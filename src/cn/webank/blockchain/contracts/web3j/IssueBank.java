package cn.webank.blockchain.contracts.web3j;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.Utils;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.EthFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
public class IssueBank extends Contract {
    private static final String BINARY = "606060405234156200000d57fe5b604051620052c6380380620052c6833981016040528080518201919060200180518201919050505b81815b81600090805190602001906200005092919062000076565b5080600190805190602001906200006992919062000076565b505b50505b505062000125565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000b957805160ff1916838001178555620000ea565b82800160010185558215620000ea579182015b82811115620000e9578251825591602001919060010190620000cc565b5b509050620000f99190620000fd565b5090565b6200012291905b808211156200011e57600081600090555060010162000104565b5090565b90565b61519180620001356000396000f3006060604052361562000191576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314620001935780630890b48c14620002335780631150457a146200026e5780631166b54b14620002c35780631202fab414620002fc57806314b0b16e14620003515780632443e1b0146200038a578063249f639314620003ad57806326efe734146200045f5780632a9232d814620004ac5780632e74841e14620005015780633f764433146200058e5780634171dd7f14620005b15780634887063014620005ea57806361dfdae6146200068a5780636b291ebe14620006c3578063764bb89414620006fc578063787d420014620007355780637d143b17146200078a5780638c4fd87e14620007df578063917a524414620008d8578063a06d083c1462000911578063a79af2ce146200093a578063ce1c11431462000a8b578063ce845d1d1462000ae0578063d4c2700e1462000b09578063db548d821462000b32578063e0ddc6ef1462000b55578063e1392ecd1462000bfd575bfe5b34156200019c57fe5b620001a662000c2a565b6040518080602001828103825283818151815260200191508051906020019080838360008314620001f8575b805182526020831115620001f857602082019150602081019050602083039250620001d2565b505050905090810190601f168015620002255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200023c57fe5b6200025860048080356000191690602001909190505062000ccc565b6040518082815260200191505060405180910390f35b34156200027757fe5b6200028162000dc9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415620002cc57fe5b620002fa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062000def565b005b34156200030557fe5b6200030f62000e34565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200035a57fe5b62000388600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062000e5a565b005b34156200039357fe5b620003ab600480803590602001909190505062000e9f565b005b3415620003b657fe5b620003d260048080356000191690602001909190505062000f43565b604051808060200182810382528381815181526020019150805190602001908083836000831462000424575b8051825260208311156200042457602082019150602081019050602083039250620003fe565b505050905090810190601f168015620004515780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200046857fe5b62000496600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506200113e565b6040518082815260200191505060405180910390f35b3415620004b557fe5b620004bf62001769565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200050a57fe5b620005266004808035600019169060200190919050506200178f565b60405180806020018281038252838181518152602001915080519060200190602002808383600083146200057b575b8051825260208311156200057b5760208201915060208101905060208303925062000555565b5050509050019250505060405180910390f35b34156200059757fe5b620005af600480803590602001909190505062001a7d565b005b3415620005ba57fe5b620005e8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062001b21565b005b3415620005f357fe5b620005fd62001b66565b60405180806020018281038252838181518152602001915080519060200190808383600083146200064f575b8051825260208311156200064f5760208201915060208101905060208303925062000629565b505050905090810190601f1680156200067c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200069357fe5b620006c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062001c08565b005b3415620006cc57fe5b620006fa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062001c4d565b005b34156200070557fe5b62000733600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062001c92565b005b34156200073e57fe5b6200074862001cd7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200079357fe5b6200079d62001cfd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415620007e857fe5b62000896600480803560001916906020019091908035600019169060200190919080356000191690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908060a00190600580602002604051908101604052809291908260056020028082843782019150505050509190505062001d23565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415620008e157fe5b6200090f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062002705565b005b34156200091a57fe5b620009246200274a565b6040518082815260200191505060405180910390f35b34156200094357fe5b6200094d620027fa565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360008314620009d5575b805182526020831115620009d557602082019150602081019050602083039250620009af565b505050905090810190601f16801562000a025780820380516001836020036101000a031916815260200191505b5083810382528581815181526020019150805190602001908083836000831462000a4d575b80518252602083111562000a4d5760208201915060208101905060208303925062000a27565b505050905090810190601f16801562000a7a5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b341562000a9457fe5b62000a9e62002983565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341562000ae957fe5b62000af3620029a9565b6040518082815260200191505060405180910390f35b341562000b1257fe5b62000b1c62002a59565b6040518082815260200191505060405180910390f35b341562000b3b57fe5b62000b53600480803590602001909190505062002b09565b005b341562000b5e57fe5b62000b9560048080356000191690602001909190803590602001909190803590602001909190803590602001909190505062002bad565b604051808060200182810382528381815181526020019150805190602001906020028083836000831462000bea575b80518252602083111562000bea5760208201915060208101905060208303925062000bc4565b5050509050019250505060405180910390f35b341562000c0657fe5b62000c1062002f3a565b604051808215151515815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562000cc45780601f1062000c985761010080835404028352916020019162000cc4565b820191906000526020600020905b81548152906001019060200180831162000ca657829003601f168201915b505050505081565b600060006000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff16636517579c856000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151562000d7457fe5b6102c65a03f1151562000d8357fe5b50505060405180519050905060008173ffffffffffffffffffffffffffffffffffffffff16141562000db8576107d162000dbb565b60005b61ffff1692505b5050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e410d1b4826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151562000f2d57fe5b6102c65a03f1151562000f3c57fe5b5050505b50565b62000f4d62002f44565b62000f5762002f58565b60006000600062000f6762002f58565b602060405180591062000f775750595b908082528060200260200182016040525b50945060009350600092505b602083101562001057578260080260020a876001900402600102915060007f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151562001048578185858151811015156200100f57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535083806001019450505b5b828060010193505062000f94565b83604051805910620010665750595b908082528060200260200182016040525b509050600092505b83831015620011305784838151811015156200109757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028184815181101515620010f157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b82806001019350506200107f565b8095505b5050505050919050565b6000600060006000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c08303d6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515620011d557fe5b6102c65a03f11515620011e457fe5b505050604051805190509250600d8573ffffffffffffffffffffffffffffffffffffffff16636ad875196000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b15156200125f57fe5b6102c65a03f115156200126e57fe5b5050506040518051905014151562001306577fb09b6d7f808ba533a7829e0b216f80fb3204b2d95a672b1cc5ef640b1818a3c26107d260006040518080602001848152602001838152602001828103825260148152602001807f646f5472616e73616374696f6e52656365697074000000000000000000000000815250602001935050505060405180910390a16107d2935062001761565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff1663343aace18373ffffffffffffffffffffffffffffffffffffffff16632d9599f26000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515620013b457fe5b6102c65a03f11515620013c357fe5b50505060405180519050856000604051602001526040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001826000191660001916815260200192505050602060405180830381600087803b15156200143557fe5b6102c65a03f115156200144457fe5b5050506040518051905090508473ffffffffffffffffffffffffffffffffffffffff1663c8e2b4dd8273ffffffffffffffffffffffffffffffffffffffff166310ae4c8d6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515620014d957fe5b6102c65a03f11515620014e857fe5b505050604051805190506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15156200154157fe5b6102c65a03f115156200155057fe5b5050508073ffffffffffffffffffffffffffffffffffffffff16630902f72f8673ffffffffffffffffffffffffffffffffffffffff1663ec86cda86000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515620015dc57fe5b6102c65a03f11515620015eb57fe5b505050604051805190506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15156200164c57fe5b6102c65a03f115156200165b57fe5b5050507fb09b6d7f808ba533a7829e0b216f80fb3204b2d95a672b1cc5ef640b1818a3c260008273ffffffffffffffffffffffffffffffffffffffff166310ae4c8d6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515620016ee57fe5b6102c65a03f11515620016fd57fe5b505050604051805190506040518080602001848152602001838152602001828103825260148152602001807f646f4163636f756e745472616e73616374696f6e000000000000000000000000815250602001935050505060405180910390a1600193505b505050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6200179962002f6c565b60006000620017a762002f6c565b60006000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508473ffffffffffffffffffffffffffffffffffffffff16636517579c886000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15156200184d57fe5b6102c65a03f115156200185c57fe5b5050506040518051905093508373ffffffffffffffffffffffffffffffffffffffff1663935f5b336000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515620018d557fe5b6102c65a03f11515620018e457fe5b50505060405180519050604051805910620018fc5750595b908082528060200260200182016040525b509250600091505b8373ffffffffffffffffffffffffffffffffffffffff1663935f5b336000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b15156200198257fe5b6102c65a03f115156200199157fe5b5050506040518051905082101562001a6f578373ffffffffffffffffffffffffffffffffffffffff1663d9f035aa836000604051604001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604060405180830381600087803b151562001a1857fe5b6102c65a03f1151562001a2757fe5b5050506040518051906020018051905050905080838381518110151562001a4a57fe5b9060200190602002019060001916908160001916815250505b81600101915062001915565b8295505b5050505050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f764433826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151562001b0b57fe5b6102c65a03f1151562001b1a57fe5b5050505b50565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562001c005780601f1062001bd45761010080835404028352916020019162001c00565b820191906000526020600020905b81548152906001019060200180831162001be257829003601f168201915b505050505081565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600060006107d162001d378962000ccc565b14151562001dc4577fb09b6d7f808ba533a7829e0b216f80fb3204b2d95a672b1cc5ef640b1818a3c26107da60006040518080602001848152602001838152602001828103825260148152602001807f646f4163636f756e745472616e73616374696f6e000000000000000000000000815250602001935050505060405180910390a160009250620026f9565b62001dce62002f80565b809050604051809103906000f080151562001de557fe5b91508173ffffffffffffffffffffffffffffffffffffffff1663ea8d2720876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151562001e5357fe5b6102c65a03f1151562001e6257fe5b5050508173ffffffffffffffffffffffffffffffffffffffff16633746389985600060058110151562001e9157fe5b60200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b151562001eed57fe5b6102c65a03f1151562001efc57fe5b5050508173ffffffffffffffffffffffffffffffffffffffff166386b588e585600160058110151562001f2b57fe5b60200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b151562001f8757fe5b6102c65a03f1151562001f9657fe5b5050508173ffffffffffffffffffffffffffffffffffffffff16635854b4c585600260058110151562001fc557fe5b60200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15156200202157fe5b6102c65a03f115156200203057fe5b5050508173ffffffffffffffffffffffffffffffffffffffff1663c3262dfd8560036005811015156200205f57fe5b60200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b1515620020bb57fe5b6102c65a03f11515620020ca57fe5b5050508173ffffffffffffffffffffffffffffffffffffffff166397c2730a856004600581101515620020f957fe5b602002015160016040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b15156200215e57fe5b6102c65a03f115156200216d57fe5b5050508173ffffffffffffffffffffffffffffffffffffffff16634fc68c75436040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1515620021dc57fe5b6102c65a03f11515620021eb57fe5b5050508173ffffffffffffffffffffffffffffffffffffffff1663c719063c886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15156200226257fe5b6102c65a03f115156200227157fe5b505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620022c462002f91565b8080602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835260008152602001600001838103825260008152602001600001945050505050604051809103906000f08015156200236957fe5b90508173ffffffffffffffffffffffffffffffffffffffff166334ca585e826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15156200240357fe5b6102c65a03f115156200241257fe5b505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa9c542689846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1515620024df57fe5b6102c65a03f11515620024ee57fe5b5050507fb09b6d7f808ba533a7829e0b216f80fb3204b2d95a672b1cc5ef640b1818a3c2600060006040518080602001848152602001838152602001828103825260148152602001807f6372656174655669727475616c4163636f756e74000000000000000000000000815250602001935050505060405180910390a17fd5ffeba1256705ade5a003c4c8555a37162e1e26d65fd06757863e67e73528ce89898888886000600581101515620025a057fe5b6020020151896001600581101515620025b557fe5b60200201518a6002600581101515620025ca57fe5b60200201518b6003600581101515620025df57fe5b60200201518c6004600581101515620025f457fe5b6020020151604051808a6000191660001916815260200189600019166000191681526020018881526020018060200187600019166000191681526020018660001916600019168152602001856000191660001916815260200184600019166000191681526020018360001916600019168152602001828103825288818151815260200191508051906020019080838360008314620026b3575b805182526020831115620026b3576020820191506020810190506020830392506200268d565b505050905090810190601f168015620026e05780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a18192505b50509695505050505050565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a06d083c6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515620027db57fe5b6102c65a03f11515620027ea57fe5b5050506040518051905090505b90565b6200280462002f44565b6200280e62002f44565b600060006001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620028d05780601f10620028a457610100808354040283529160200191620028d0565b820191906000526020600020905b815481529060010190602001808311620028b257829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620029705780601f10620029445761010080835404028352916020019162002970565b820191906000526020600020905b8154815290600101906020018083116200295257829003601f168201915b505050505091509250925092505b909192565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce845d1d6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562002a3a57fe5b6102c65a03f1151562002a4957fe5b5050506040518051905090505b90565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4c2700e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562002aea57fe5b6102c65a03f1151562002af957fe5b5050506040518051905090505b90565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db548d82826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151562002b9757fe5b6102c65a03f1151562002ba657fe5b5050505b50565b62002bb762002fa2565b60006000600060006000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663343aace18a8c6000604051602001526040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001826000191660001916815260200192505050602060405180830381600087803b151562002c6857fe5b6102c65a03f1151562002c7757fe5b5050506040518051905094508473ffffffffffffffffffffffffffffffffffffffff16635cbd7ceb6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562002cf057fe5b6102c65a03f1151562002cff57fe5b5050506040518051905093508388101562002f025787840392508691508282111562002d29578291505b8160405180591062002d385750595b908082528060200260200182016040525b509550600090505b8181101562002ef957600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635778472a8673ffffffffffffffffffffffffffffffffffffffff166376f75e7f848c016000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151562002e0f57fe5b6102c65a03f1151562002e1e57fe5b505050604051805190506000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151562002e8857fe5b6102c65a03f1151562002e9757fe5b50505060405180519050868281518110151562002eb057fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b80600101905062002d51565b85955062002f2d565b600060405180591062002f125750595b908082528060200260200182016040525b50955062002f2d565b5b5050505050949350505050565b6000600190505b90565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b604051610c288062002fb783390190565b6040516115878062003bdf83390190565b60206040519081016040528060008152509056006060604052341561000c57fe5b5b610c0c8061001c6000396000f30060606040523615610173576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303f365b8146101755780630bbb3fb71461019b57806334ca585e146101bf57806337463899146101f55780633d1c40aa146102195780634589fe0c146102635780634a7c01ec146102915780634fc68c75146102e357806356c4e05a146103035780635854b4c5146103295780635dab24201461034d5780637607f98d1461037b57806376f75e7f146103db5780637fbd56181461043b57806386b588e514610469578063935f5b331461048d57806397c2730a146104b3578063a2423ab1146104e0578063b7efb86c14610506578063c046371114610534578063c3262dfd1461055a578063c719063c1461057e578063c728f8bb146105a2578063d7edcd9b146105d0578063d83b066e146105fe578063d9f035aa1461061e578063e302418a14610661578063e5a6b10f1461068f578063ea8d2720146106b5575bfe5b341561017d57fe5b6101856106d5565b6040518082815260200191505060405180910390f35b34156101a357fe5b6101bd6004808035600019169060200190919050506106db565b005b34156101c757fe5b6101f3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106ea565b005b34156101fd57fe5b61021760048080356000191690602001909190505061072f565b005b341561022157fe5b61024d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061073e565b6040518082815260200191505060405180910390f35b341561026b57fe5b610273610938565b60405180826000191660001916815260200191505060405180910390f35b341561029957fe5b6102a161093e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102eb57fe5b6103016004808035906020019091905050610964565b005b341561030b57fe5b61031361096f565b6040518082815260200191505060405180910390f35b341561033157fe5b61034b600480803560001916906020019091905050610975565b005b341561035557fe5b61035d610984565b60405180826000191660001916815260200191505060405180910390f35b341561038357fe5b610399600480803590602001909190505061098a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103e357fe5b6103f960048080359060200190919050506109ca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561044357fe5b61044b610a0a565b60405180826000191660001916815260200191505060405180910390f35b341561047157fe5b61048b600480803560001916906020019091905050610a10565b005b341561049557fe5b61049d610a1f565b6040518082815260200191505060405180910390f35b34156104bb57fe5b6104de600480803560001916906020019091908035906020019091905050610a2d565b005b34156104e857fe5b6104f0610a93565b6040518082815260200191505060405180910390f35b341561050e57fe5b610516610aa1565b60405180826000191660001916815260200191505060405180910390f35b341561053c57fe5b610544610aa7565b6040518082815260200191505060405180910390f35b341561056257fe5b61057c600480803560001916906020019091905050610aad565b005b341561058657fe5b6105a0600480803560001916906020019091905050610abc565b005b34156105aa57fe5b6105b2610acb565b60405180826000191660001916815260200191505060405180910390f35b34156105d857fe5b6105e0610ad1565b60405180826000191660001916815260200191505060405180910390f35b341561060657fe5b61061c6004808035906020019091905050610ad7565b005b341561062657fe5b61063c6004808035906020019091905050610ae2565b6040518083600019166000191681526020018281526020019250505060405180910390f35b341561066957fe5b610671610b16565b60405180826000191660001916815260200191505060405180910390f35b341561069757fe5b61069f610b1c565b6040518082815260200191505060405180910390f35b34156106bd57fe5b6106d36004808035906020019091905050610b22565b005b600a5481565b80600081600019169055505b50565b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b80600881600019169055505b50565b60007fb09b6d7f808ba533a7829e0b216f80fb3204b2d95a672b1cc5ef640b1818a3c28273ffffffffffffffffffffffffffffffffffffffff1663779cd0836000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b15156107cd57fe5b6102c65a03f115156107db57fe5b5050506040518051905060006040518080602001848152602001838152602001828103825260088152602001807f696e207569203738000000000000000000000000000000000000000000000000815250602001935050505060405180910390a16107d19050610933565b6102c65a03f1151561085457fe5b5050506040518051905014156108cd57600680548060010182816108789190610b2d565b916000526020600020900160005b84909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610932565b600780548060010182816108e19190610b2d565b916000526020600020900160005b84909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b5b919050565b60085481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600d819055505b50565b60045481565b80600c81600019169055505b50565b60005481565b60078181548110151561099957fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006818154811015156109d957fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b80600981600019169055505b50565b600060058054905090505b90565b60058054806001018281610a419190610b59565b916000526020600020906002020160005b6040604051908101604052808660001916815260200185815250909190915060008201518160000190600019169055602082015181600101555050505b5050565b600060068054905090505b90565b600b5481565b600d5481565b80600181600019169055505b50565b80600281600019169055505b50565b60025481565b600c5481565b806004819055505b50565b600581815481101515610af157fe5b906000526020600020906002020160005b915090508060000154908060010154905082565b60015481565b60035481565b806003819055505b50565b815481835581811511610b5457818360005260206000209182019101610b539190610b8b565b5b505050565b815481835581811511610b8657600202816002028360005260206000209182019101610b859190610bb0565b5b505050565b610bad91905b80821115610ba9576000816000905550600101610b91565b5090565b90565b610bdd91905b80821115610bd95760006000820160009055600182016000905550600201610bb6565b5090565b905600a165627a7a723058205a74e2b5c8496b3a4f4c6451756296077ffb4011f5e1970b77e33e053f81dd100029606060405234156200000d57fe5b6040516200158738038062001587833981016040528080518201919060200180518201919060200180519060200190919080519060200190919050505b83835b816000908051906020019062000065929190620003be565b5080600190805190602001906200007e929190620003be565b505b505081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000122620001516401000000000262000847176401000000009004565b6005600060036000849190505583919050555050600060048190555060006006819055505b505050506200046d565b60006000600060006000600060006103e86103e8428115156200017057fe5b0642038115156200017d57fe5b049450600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392d66313866000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156200021757fe5b6102c65a03f115156200022657fe5b5050506040518051905061ffff169350600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a324ad24866000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1515620002cd57fe5b6102c65a03f11515620002dc57fe5b5050506040518051905060ff169250600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166365c72840866000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156200038257fe5b6102c65a03f115156200039157fe5b5050506040518051905060ff16915081606484026127108602010190508381965096505b50505050509091565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200040157805160ff191683800117855562000432565b8280016001018555821562000432579182015b828111156200043157825182559160200191906001019062000414565b5b50905062000441919062000445565b5090565b6200046a91905b80821115620004665760008160009055506001016200044c565b5090565b90565b61110a806200047d6000396000f300606060405236156100d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806211e6fb146100da57806306fdde03146101005780630b5a006b146101995780631166b54b146101bf5780633a20c2f0146101f55780634171dd7f1461021b57806343a6f4ee1461025157806348870630146102a357806348c8cd411461033c5780635504160e1461038e578063a167cfc9146103e0578063a79af2ce1461040d578063e553c60d14610553578063efedcc6414610589578063f4e456f3146105d7575bfe5b34156100e257fe5b6100ea6105fd565b6040518082815260200191505060405180910390f35b341561010857fe5b610110610603565b604051808060200182810382528381815181526020019150805190602001908083836000831461015f575b80518252602083111561015f5760208201915060208101905060208303925061013b565b505050905090810190601f16801561018b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a157fe5b6101a96106a1565b6040518082815260200191505060405180910390f35b34156101c757fe5b6101f3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106a7565b005b34156101fd57fe5b6102056106ec565b6040518082815260200191505060405180910390f35b341561022357fe5b61024f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106f2565b005b341561025957fe5b610261610737565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102ab57fe5b6102b361075d565b6040518080602001828103825283818151815260200191508051906020019080838360008314610302575b805182526020831115610302576020820191506020810190506020830392506102de565b505050905090810190601f16801561032e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034457fe5b61034c6107fb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561039657fe5b61039e610821565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103e857fe5b6103f0610847565b604051808381526020018281526020019250505060405180910390f35b341561041557fe5b61041d610aac565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381038352868181518152602001915080519060200190808383600083146104a2575b8051825260208311156104a25760208201915060208101905060208303925061047e565b505050905090810190601f1680156104ce5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360008314610516575b805182526020831115610516576020820191506020810190506020830392506104f2565b505050905090810190601f1680156105425780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b341561055b57fe5b610587600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c29565b005b341561059157fe5b6105bd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c6e565b604051808215151515815260200191505060405180910390f35b34156105df57fe5b6105e76110c4565b6040518082815260200191505060405180910390f35b60065481565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106995780601f1061066e57610100808354040283529160200191610699565b820191906000526020600020905b81548152906001019060200180831161067c57829003601f168201915b505050505081565b60055481565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60045481565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107f35780601f106107c8576101008083540402835291602001916107f3565b820191906000526020600020905b8154815290600101906020018083116107d657829003601f168201915b505050505081565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006000600060006000600060006103e86103e84281151561086557fe5b06420381151561087157fe5b049450600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392d66313866000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561090a57fe5b6102c65a03f1151561091857fe5b5050506040518051905061ffff169350600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a324ad24866000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156109be57fe5b6102c65a03f115156109cc57fe5b5050506040518051905060ff169250600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166365c72840866000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1515610a7157fe5b6102c65a03f11515610a7f57fe5b5050506040518051905060ff16915081606484026127108602010190508381965096505b50505050509091565b610ab46110ca565b610abc6110ca565b600060006001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b7a5780601f10610b4f57610100808354040283529160200191610b7a565b820191906000526020600020905b815481529060010190602001808311610b5d57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c165780601f10610beb57610100808354040283529160200191610c16565b820191906000526020600020905b815481529060010190602001808311610bf957829003601f168201915b505050505091509250925092505b909192565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600060006000600060008673ffffffffffffffffffffffffffffffffffffffff1663269410536000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610ce657fe5b6102c65a03f11515610cf457fe5b5050506040518051905094508673ffffffffffffffffffffffffffffffffffffffff16636ad875196000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610d6c57fe5b6102c65a03f11515610d7a57fe5b5050506040518051905093508673ffffffffffffffffffffffffffffffffffffffff1663779cd0836000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610df257fe5b6102c65a03f11515610e0057fe5b505050604051805190509250600d84148015610e1d575060018314155b156110b557600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375c303c96000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610eb057fe5b6102c65a03f11515610ebe57fe5b50505060405180519050851315610ed857600095506110ba565b610ee0610847565b809250819350505060055482141515610f03578160058190555060006006819055505b60035481141515610f1e578060038190555060006004819055505b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313f05c76000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610fac57fe5b6102c65a03f11515610fba57fe5b5050506040518051905085600454011315610fd857600095506110ba565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f56972926000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151561106657fe5b6102c65a03f1151561107457fe5b505050604051805190508560065401131561109257600095506110ba565b84600460008282540192505081905550846006600082825401925050819055505b5b5b600195505b5050505050919050565b60035481565b6020604051908101604052806000815250905600a165627a7a723058207f301e38bc76f7d8e5bd3a8efc87ef6de1d9908057bc41f17a6ba5b18000dd280029a165627a7a723058201784d40d5173ac8d119d3fd769dfa5fb125c86dbff5faa8b0c4dbd66bd69f7b60029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_ISACCOUNTEXISTS = "isAccountExists";

    public static final String FUNC_M_INFO = "m_info";

    public static final String FUNC_SETMETAADDRESS = "setMetaAddress";

    public static final String FUNC_M_DATETIME = "m_datetime";

    public static final String FUNC_SETDATETIME = "setDateTime";

    public static final String FUNC_SETCURRENTBALANCE = "setCurrentBalance";

    public static final String FUNC_BYTES32TOSTRINGDEMO = "bytes32ToStringDemo";

    public static final String FUNC_DOTRANSACTIONRECEIPT = "doTransactionReceipt";

    public static final String FUNC_M_POP_LIMIT = "m_pop_limit";

    public static final String FUNC_GETACCOUNTCARDLIST = "getAccountCardList";

    public static final String FUNC_SETCREDIT = "setCredit";

    public static final String FUNC_SETPOPLIMIT = "setPopLimit";

    public static final String FUNC_ABI = "abi";

    public static final String FUNC_SETDATA = "setData";

    public static final String FUNC_SETCHECKINFOMANAGER = "setCheckInfoManager";

    public static final String FUNC_SETINFO = "setInfo";

    public static final String FUNC_M_CHECKINFO_MANAGER = "m_checkinfo_manager";

    public static final String FUNC_M_DATA = "m_data";

    public static final String FUNC_CREATEVIRTUALACCOUNT = "createVirtualAccount";

    public static final String FUNC_SETORDERFACTORY = "setOrderFactory";

    public static final String FUNC_CREDIT = "credit";

    public static final String FUNC_GETMETA = "getMeta";

    public static final String FUNC_M_ORDER_FACTORY = "m_order_factory";

    public static final String FUNC_CURRENTBALANCE = "currentBalance";

    public static final String FUNC_CURRENCYBASE = "currencyBase";

    public static final String FUNC_SETCURRENCYBASE = "setCurrencyBase";

    public static final String FUNC_GETCLEARINGTRANS = "getClearingTrans";

    public static final String FUNC_CHECKPWD = "checkPwd";

    public static final Event TRANSRETLOG_EVENT = new Event("transRetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event ACCOUNTBALANCELOG_EVENT = new Event("accountBalanceLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event CONSUMELOG_EVENT = new Event("consumeLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event ORDERLOG_EVENT = new Event("orderLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event DEBUGRETLOG_EVENT = new Event("debugRetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event NEWACCOUNT_EVENT = new Event("newAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected IssueBank(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected IssueBank(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected IssueBank(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected IssueBank(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> isAccountExists(byte[] account) {
        final Function function = new Function(FUNC_ISACCOUNTEXISTS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> m_info() {
        final Function function = new Function(FUNC_M_INFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setMetaAddress(String meta) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> m_datetime() {
        final Function function = new Function(FUNC_M_DATETIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setDateTime(String addr) {
        final Function function = new Function(
                FUNC_SETDATETIME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCurrentBalance(BigInteger current_balance) {
        final Function function = new Function(
                FUNC_SETCURRENTBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(current_balance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> bytes32ToStringDemo(byte[] x) {
        final Function function = new Function(FUNC_BYTES32TOSTRINGDEMO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> doTransactionReceipt(String order) {
        final Function function = new Function(
                FUNC_DOTRANSACTIONRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(order)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> m_pop_limit() {
        final Function function = new Function(FUNC_M_POP_LIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getAccountCardList(byte[] account) {
        final Function function = new Function(FUNC_GETACCOUNTCARDLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setCredit(BigInteger credit) {
        final Function function = new Function(
                FUNC_SETCREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(credit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setPopLimit(String addr) {
        final Function function = new Function(
                FUNC_SETPOPLIMIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> abi() {
        final Function function = new Function(FUNC_ABI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setData(String addr) {
        final Function function = new Function(
                FUNC_SETDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCheckInfoManager(String addr) {
        final Function function = new Function(
                FUNC_SETCHECKINFOMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setInfo(String addr) {
        final Function function = new Function(
                FUNC_SETINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> m_checkinfo_manager() {
        final Function function = new Function(FUNC_M_CHECKINFO_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> m_data() {
        final Function function = new Function(FUNC_M_DATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> createVirtualAccount(byte[] org_id, byte[] account, byte[] acc_pwd, BigInteger currency, String curr_date, List<byte[]> user_kyc) {
        final Function function = new Function(
                FUNC_CREATEVIRTUALACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(account), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(acc_pwd), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(curr_date), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray5<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        Utils.typeMap(user_kyc, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setOrderFactory(String addr) {
        final Function function = new Function(
                FUNC_SETORDERFACTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> credit() {
        final Function function = new Function(FUNC_CREDIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<String, String, String>> getMeta() {
        final Function function = new Function(FUNC_GETMETA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<String> m_order_factory() {
        final Function function = new Function(FUNC_M_ORDER_FACTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> currentBalance() {
        final Function function = new Function(FUNC_CURRENTBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> currencyBase() {
        final Function function = new Function(FUNC_CURRENCYBASE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setCurrencyBase(BigInteger currency_base) {
        final Function function = new Function(
                FUNC_SETCURRENCYBASE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency_base)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getClearingTrans(byte[] orgId, BigInteger clearCode, BigInteger offset, BigInteger num) {
        final Function function = new Function(FUNC_GETCLEARINGTRANS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(clearCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(offset), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Boolean> checkPwd() {
        final Function function = new Function(FUNC_CHECKPWD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public List<TransRetLogEventResponse> getTransRetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSRETLOG_EVENT, transactionReceipt);
        ArrayList<TransRetLogEventResponse> responses = new ArrayList<TransRetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransRetLogEventResponse typedResponse = new TransRetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oper = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.check_code = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransRetLogEventResponse> transRetLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransRetLogEventResponse>() {
            @Override
            public TransRetLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSRETLOG_EVENT, log);
                TransRetLogEventResponse typedResponse = new TransRetLogEventResponse();
                typedResponse.log = log;
                typedResponse.oper = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.check_code = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransRetLogEventResponse> transRetLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSRETLOG_EVENT));
        return transRetLogEventFlowable(filter);
    }

    public List<AccountBalanceLogEventResponse> getAccountBalanceLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTBALANCELOG_EVENT, transactionReceipt);
        ArrayList<AccountBalanceLogEventResponse> responses = new ArrayList<AccountBalanceLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountBalanceLogEventResponse typedResponse = new AccountBalanceLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccountBalanceLogEventResponse> accountBalanceLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AccountBalanceLogEventResponse>() {
            @Override
            public AccountBalanceLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCOUNTBALANCELOG_EVENT, log);
                AccountBalanceLogEventResponse typedResponse = new AccountBalanceLogEventResponse();
                typedResponse.log = log;
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccountBalanceLogEventResponse> accountBalanceLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTBALANCELOG_EVENT));
        return accountBalanceLogEventFlowable(filter);
    }

    public List<ConsumeLogEventResponse> getConsumeLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CONSUMELOG_EVENT, transactionReceipt);
        ArrayList<ConsumeLogEventResponse> responses = new ArrayList<ConsumeLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ConsumeLogEventResponse typedResponse = new ConsumeLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tx_amt_1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.currency_1 = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tx_amt_2 = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.currency_2 = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ConsumeLogEventResponse> consumeLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ConsumeLogEventResponse>() {
            @Override
            public ConsumeLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CONSUMELOG_EVENT, log);
                ConsumeLogEventResponse typedResponse = new ConsumeLogEventResponse();
                typedResponse.log = log;
                typedResponse.tx_amt_1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.currency_1 = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tx_amt_2 = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.currency_2 = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ConsumeLogEventResponse> consumeLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONSUMELOG_EVENT));
        return consumeLogEventFlowable(filter);
    }

    public List<OrderLogEventResponse> getOrderLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERLOG_EVENT, transactionReceipt);
        ArrayList<OrderLogEventResponse> responses = new ArrayList<OrderLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OrderLogEventResponse typedResponse = new OrderLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.bytesArgs = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.intArgs = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.txStatus = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderLogEventResponse> orderLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderLogEventResponse>() {
            @Override
            public OrderLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERLOG_EVENT, log);
                OrderLogEventResponse typedResponse = new OrderLogEventResponse();
                typedResponse.log = log;
                typedResponse.bytesArgs = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.intArgs = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.txStatus = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderLogEventResponse> orderLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERLOG_EVENT));
        return orderLogEventFlowable(filter);
    }

    public List<DebugRetLogEventResponse> getDebugRetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGRETLOG_EVENT, transactionReceipt);
        ArrayList<DebugRetLogEventResponse> responses = new ArrayList<DebugRetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugRetLogEventResponse typedResponse = new DebugRetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.msg1 = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.msg2 = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.msg3 = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugRetLogEventResponse> debugRetLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DebugRetLogEventResponse>() {
            @Override
            public DebugRetLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGRETLOG_EVENT, log);
                DebugRetLogEventResponse typedResponse = new DebugRetLogEventResponse();
                typedResponse.log = log;
                typedResponse.msg1 = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.msg2 = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.msg3 = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugRetLogEventResponse> debugRetLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGRETLOG_EVENT));
        return debugRetLogEventFlowable(filter);
    }

    public List<NewAccountEventResponse> getNewAccountEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWACCOUNT_EVENT, transactionReceipt);
        ArrayList<NewAccountEventResponse> responses = new ArrayList<NewAccountEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewAccountEventResponse typedResponse = new NewAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.org_id = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currency = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.curr_date = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.firstName = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.lastName = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.idType = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.userID = (byte[]) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.UserCard = (byte[]) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewAccountEventResponse> newAccountEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewAccountEventResponse>() {
            @Override
            public NewAccountEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWACCOUNT_EVENT, log);
                NewAccountEventResponse typedResponse = new NewAccountEventResponse();
                typedResponse.log = log;
                typedResponse.org_id = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currency = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.curr_date = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.firstName = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.lastName = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.idType = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.userID = (byte[]) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.UserCard = (byte[]) eventValues.getNonIndexedValues().get(8).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewAccountEventResponse> newAccountEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWACCOUNT_EVENT));
        return newAccountEventFlowable(filter);
    }

    @Deprecated
    public static IssueBank load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new IssueBank(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static IssueBank load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new IssueBank(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static IssueBank load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new IssueBank(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static IssueBank load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new IssueBank(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<IssueBank> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi)));
        return deployRemoteCall(IssueBank.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<IssueBank> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi)));
        return deployRemoteCall(IssueBank.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<IssueBank> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi)));
        return deployRemoteCall(IssueBank.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<IssueBank> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi)));
        return deployRemoteCall(IssueBank.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class TransRetLogEventResponse {
        public Log log;

        public String oper;

        public BigInteger status;

        public BigInteger check_code;
    }

    public static class AccountBalanceLogEventResponse {
        public Log log;

        public BigInteger status;

        public BigInteger balance;
    }

    public static class ConsumeLogEventResponse {
        public Log log;

        public BigInteger tx_amt_1;

        public BigInteger currency_1;

        public BigInteger tx_amt_2;

        public BigInteger currency_2;
    }

    public static class OrderLogEventResponse {
        public Log log;

        public List<byte[]> bytesArgs;

        public List<BigInteger> intArgs;

        public BigInteger txStatus;
    }

    public static class DebugRetLogEventResponse {
        public Log log;

        public byte[] msg1;

        public BigInteger msg2;

        public BigInteger msg3;
    }

    public static class NewAccountEventResponse {
        public Log log;

        public byte[] org_id;

        public byte[] account;

        public BigInteger currency;

        public String curr_date;

        public byte[] firstName;

        public byte[] lastName;

        public byte[] idType;

        public byte[] userID;

        public byte[] UserCard;
    }
}
