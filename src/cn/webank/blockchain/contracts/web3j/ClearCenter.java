package cn.webank.blockchain.contracts.web3j;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.Utils;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.EthFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
public class ClearCenter extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_GETCLEARINGSTATUS = "getClearingStatus";

    public static final String FUNC_SETMETAADDRESS = "setMetaAddress";

    public static final String FUNC_SETCLEARINGSTATUS = "setClearingStatus";

    public static final String FUNC_GETEXCHANGERATE = "getExchangeRate";

    public static final String FUNC_SETTRANSFILETAG = "setTransFileTag";

    public static final String FUNC_CLEARCENTERINFO = "clearCenterInfo";

    public static final String FUNC_MODIFYBANKCREDIT = "modifyBankCredit";

    public static final String FUNC_ABI = "abi";

    public static final String FUNC_CLEARCENTERDATA = "clearCenterData";

    public static final String FUNC_SETDATA = "setData";

    public static final String FUNC_SETCHECKINFOMANAGER = "setCheckInfoManager";

    public static final String FUNC_SETINFO = "setInfo";

    public static final String FUNC_CHECKINFOMANAGER = "checkinfoManager";

    public static final String FUNC_GETCLEARINGRESULT = "getClearingResult";

    public static final String FUNC_GETBANKAMOUNT = "getBankAmount";

    public static final String FUNC_UPDATECHECKCODESTATUS = "updateCheckCodeStatus";

    public static final String FUNC_GETMETA = "getMeta";

    public static final String FUNC_MODIFYBANKAMOUNT = "modifyBankAmount";

    public static final String FUNC_DOTRANSACTION = "doTransaction";

    public static final String FUNC_SETEXCHANGERATE = "setExchangeRate";

    public static final String FUNC_REGISTERORG = "registerOrg";

    public static final Event TRANSRETLOG_EVENT = new Event("transRetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event ACCOUNTBALANCETLOG_EVENT = new Event("accountBalancetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event CONSUMELOG_EVENT = new Event("consumeLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event ORGACCRUAL_EVENT = new Event("orgAccrual", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event DEBUGLOG_EVENT = new Event("debugLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUGORDERLOG_EVENT = new Event("debugOrderLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected ClearCenter(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ClearCenter(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ClearCenter(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ClearCenter(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getClearingStatus(BigInteger checkCode) {
        final Function function = new Function(FUNC_GETCLEARINGSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setMetaAddress(String meta) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setClearingStatus(BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_SETCLEARINGSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>>> getExchangeRate(BigInteger currency) {
        final Function function = new Function(FUNC_GETEXCHANGERATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>>>(
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                convertToNative((List<Uint256>) results.get(5).getValue()), 
                                convertToNative((List<Bytes32>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setTransFileTag(BigInteger clearCode, BigInteger fileTagResult, byte[] filePath) {
        final Function function = new Function(
                FUNC_SETTRANSFILETAG, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(clearCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(fileTagResult), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(filePath)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> clearCenterInfo() {
        final Function function = new Function(FUNC_CLEARCENTERINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> modifyBankCredit(BigInteger orgType, byte[] orgID, BigInteger credit) {
        final Function function = new Function(
                FUNC_MODIFYBANKCREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(credit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> abi() {
        final Function function = new Function(FUNC_ABI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> clearCenterData() {
        final Function function = new Function(FUNC_CLEARCENTERDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setData(String addr) {
        final Function function = new Function(
                FUNC_SETDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCheckInfoManager(String addr) {
        final Function function = new Function(
                FUNC_SETCHECKINFOMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setInfo(String addr) {
        final Function function = new Function(
                FUNC_SETINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> checkinfoManager() {
        final Function function = new Function(FUNC_CHECKINFOMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> getClearingResult(BigInteger orgType, byte[] orgId, BigInteger clearCode) {
        final Function function = new Function(FUNC_GETCLEARINGRESULT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(clearCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getBankAmount(BigInteger orgType, byte[] orgId) {
        final Function function = new Function(FUNC_GETBANKAMOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> updateCheckCodeStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_UPDATECHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, String, String>> getMeta() {
        final Function function = new Function(FUNC_GETMETA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> modifyBankAmount(BigInteger orgType, byte[] orgID, BigInteger balance) {
        final Function function = new Function(
                FUNC_MODIFYBANKAMOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(balance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> doTransaction(String orderAddr) {
        final Function function = new Function(
                FUNC_DOTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(orderAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setExchangeRate(BigInteger currency, BigInteger fxRate, BigInteger refundFxRate, BigInteger exTimeStamp, BigInteger currencyUnit, List<BigInteger> exDataArr, List<byte[]> exDataStr0) {
        final Function function = new Function(
                FUNC_SETEXCHANGERATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(fxRate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(refundFxRate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(exTimeStamp), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currencyUnit), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        Utils.typeMap(exDataArr, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class)),
                new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        Utils.typeMap(exDataStr0, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerOrg(BigInteger orgType, byte[] orgId, String orgAddr, BigInteger balance, BigInteger credit, BigInteger currencyBase) {
        final Function function = new Function(
                FUNC_REGISTERORG, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(orgAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(balance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(credit), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currencyBase)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<TransRetLogEventResponse> getTransRetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSRETLOG_EVENT, transactionReceipt);
        ArrayList<TransRetLogEventResponse> responses = new ArrayList<TransRetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransRetLogEventResponse typedResponse = new TransRetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oper = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.check_code = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransRetLogEventResponse> transRetLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransRetLogEventResponse>() {
            @Override
            public TransRetLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSRETLOG_EVENT, log);
                TransRetLogEventResponse typedResponse = new TransRetLogEventResponse();
                typedResponse.log = log;
                typedResponse.oper = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.check_code = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransRetLogEventResponse> transRetLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSRETLOG_EVENT));
        return transRetLogEventFlowable(filter);
    }

    public List<AccountBalancetLogEventResponse> getAccountBalancetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTBALANCETLOG_EVENT, transactionReceipt);
        ArrayList<AccountBalancetLogEventResponse> responses = new ArrayList<AccountBalancetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountBalancetLogEventResponse typedResponse = new AccountBalancetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccountBalancetLogEventResponse> accountBalancetLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AccountBalancetLogEventResponse>() {
            @Override
            public AccountBalancetLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCOUNTBALANCETLOG_EVENT, log);
                AccountBalancetLogEventResponse typedResponse = new AccountBalancetLogEventResponse();
                typedResponse.log = log;
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccountBalancetLogEventResponse> accountBalancetLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTBALANCETLOG_EVENT));
        return accountBalancetLogEventFlowable(filter);
    }

    public List<ConsumeLogEventResponse> getConsumeLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CONSUMELOG_EVENT, transactionReceipt);
        ArrayList<ConsumeLogEventResponse> responses = new ArrayList<ConsumeLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ConsumeLogEventResponse typedResponse = new ConsumeLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tx_amt_1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.currency_1 = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tx_amt_2 = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.currency_2 = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ConsumeLogEventResponse> consumeLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ConsumeLogEventResponse>() {
            @Override
            public ConsumeLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CONSUMELOG_EVENT, log);
                ConsumeLogEventResponse typedResponse = new ConsumeLogEventResponse();
                typedResponse.log = log;
                typedResponse.tx_amt_1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.currency_1 = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tx_amt_2 = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.currency_2 = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ConsumeLogEventResponse> consumeLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONSUMELOG_EVENT));
        return consumeLogEventFlowable(filter);
    }

    public List<OrgAccrualEventResponse> getOrgAccrualEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ORGACCRUAL_EVENT, transactionReceipt);
        ArrayList<OrgAccrualEventResponse> responses = new ArrayList<OrgAccrualEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OrgAccrualEventResponse typedResponse = new OrgAccrualEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.accrualAcquirer = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accrualIssuing = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrgAccrualEventResponse> orgAccrualEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrgAccrualEventResponse>() {
            @Override
            public OrgAccrualEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ORGACCRUAL_EVENT, log);
                OrgAccrualEventResponse typedResponse = new OrgAccrualEventResponse();
                typedResponse.log = log;
                typedResponse.accrualAcquirer = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.accrualIssuing = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrgAccrualEventResponse> orgAccrualEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORGACCRUAL_EVENT));
        return orgAccrualEventFlowable(filter);
    }

    public List<DebugLogEventResponse> getDebugLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGLOG_EVENT, transactionReceipt);
        ArrayList<DebugLogEventResponse> responses = new ArrayList<DebugLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugLogEventResponse typedResponse = new DebugLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.msg = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugLogEventResponse> debugLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DebugLogEventResponse>() {
            @Override
            public DebugLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGLOG_EVENT, log);
                DebugLogEventResponse typedResponse = new DebugLogEventResponse();
                typedResponse.log = log;
                typedResponse.msg = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugLogEventResponse> debugLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGLOG_EVENT));
        return debugLogEventFlowable(filter);
    }

    public List<DebugOrderLogEventResponse> getDebugOrderLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGORDERLOG_EVENT, transactionReceipt);
        ArrayList<DebugOrderLogEventResponse> responses = new ArrayList<DebugOrderLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugOrderLogEventResponse typedResponse = new DebugOrderLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugOrderLogEventResponse> debugOrderLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DebugOrderLogEventResponse>() {
            @Override
            public DebugOrderLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGORDERLOG_EVENT, log);
                DebugOrderLogEventResponse typedResponse = new DebugOrderLogEventResponse();
                typedResponse.log = log;
                typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugOrderLogEventResponse> debugOrderLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGORDERLOG_EVENT));
        return debugOrderLogEventFlowable(filter);
    }

    @Deprecated
    public static ClearCenter load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ClearCenter(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ClearCenter load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ClearCenter(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ClearCenter load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ClearCenter(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ClearCenter load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ClearCenter(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ClearCenter> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String abi, String infoAddr, String dataAddr, String checkInfoAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(infoAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(dataAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(checkInfoAddr)));
        return deployRemoteCall(ClearCenter.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<ClearCenter> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String abi, String infoAddr, String dataAddr, String checkInfoAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(infoAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(dataAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(checkInfoAddr)));
        return deployRemoteCall(ClearCenter.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ClearCenter> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String abi, String infoAddr, String dataAddr, String checkInfoAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(infoAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(dataAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(checkInfoAddr)));
        return deployRemoteCall(ClearCenter.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ClearCenter> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String abi, String infoAddr, String dataAddr, String checkInfoAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(infoAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(dataAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(checkInfoAddr)));
        return deployRemoteCall(ClearCenter.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class TransRetLogEventResponse {
        public Log log;

        public String oper;

        public BigInteger status;

        public BigInteger check_code;
    }

    public static class AccountBalancetLogEventResponse {
        public Log log;

        public BigInteger status;

        public BigInteger balance;
    }

    public static class ConsumeLogEventResponse {
        public Log log;

        public BigInteger tx_amt_1;

        public BigInteger currency_1;

        public BigInteger tx_amt_2;

        public BigInteger currency_2;
    }

    public static class OrgAccrualEventResponse {
        public Log log;

        public BigInteger accrualAcquirer;

        public BigInteger accrualIssuing;
    }

    public static class DebugLogEventResponse {
        public Log log;

        public String msg;
    }

    public static class DebugOrderLogEventResponse {
        public Log log;

        public BigInteger length;
    }
}
