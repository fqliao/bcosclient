package cn.webank.blockchain.contracts.web3j;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.EthFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
public class CheckInfoManager extends Contract {
    private static final String BINARY = "606060405234156200000d57fe5b60405162003d5d38038062003d5d833981016040528080518201919060200180518201919060200180518201919060200180518201919050505b83835b816000908051906020019062000062929190620001e9565b5080600190805190602001906200007b929190620001e9565b505b505081816200008b62000270565b808060200180602001838103835285818151815260200191508051906020019080838360008314620000de575b805182526020831115620000de57602082019150602081019050602083039250620000b8565b505050905090810190601f1680156200010b5780820380516001836020036101000a031916815260200191505b5083810382528481815181526020019150805190602001908083836000831462000156575b805182526020831115620001565760208201915060208101905060208303925062000130565b505050905090810190601f168015620001835780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f08015156200019e57fe5b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50505050620002a9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022c57805160ff19168380011785556200025d565b828001600101855582156200025d579182015b828111156200025c5782518255916020019190600101906200023f565b5b5090506200026c919062000281565b5090565b60405161076480620035f983390190565b620002a691905b80821115620002a257600081600090555060010162000288565b5090565b90565b61334080620002b96000396000f300606060405236156200013d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146200013f5780631166b54b14620001df578063290782fb14620002185780632d9599f214620002885780633227aaa514620002b1578063343aace114620003065780634394ec0b146200037657806346a948e014620003ba5780634887063014620003f15780635aec3ec814620004915780635cea89b6146200050e5780635d8af65b146200057e5780638204a88e14620005c25780638eaa730b14620005fb578063a79af2ce1462000624578063b2d577e51462000775578063baf87c5a14620007e5578063c8e2b4dd1462000855578063ca2126a91462000878578063ccbac60d14620008eb578063d64232c31462000961578063f9c1df3d14620009a5575bfe5b34156200014857fe5b62000152620009dc565b6040518080602001828103825283818151815260200191508051906020019080838360008314620001a4575b805182526020831115620001a4576020820191506020810190506020830392506200017e565b505050905090810190601f168015620001d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415620001e857fe5b62000216600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062000a7e565b005b34156200022157fe5b6200024660048080359060200190919080356000191690602001909190505062000ac3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200029157fe5b6200029b62000ada565b6040518082815260200191505060405180910390f35b3415620002ba57fe5b620002c462000ae5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200030f57fe5b6200033460048080359060200190919080356000191690602001909190505062000b0b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200037f57fe5b620003a460048080356000191690602001909190803590602001909190505062000b22565b6040518082815260200191505060405180910390f35b3415620003c357fe5b620003db600480803590602001909190505062000bbe565b6040518082815260200191505060405180910390f35b3415620003fa57fe5b6200040462000be8565b604051808060200182810382528381815181526020019150805190602001908083836000831462000456575b805182526020831115620004565760208201915060208101905060208303925062000430565b505050905090810190601f168015620004835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200049a57fe5b620004bf60048080356000191690602001909190803590602001909190505062000c8a565b6040518089815260200188815260200187600019166000191681526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b34156200051757fe5b6200053c600480803590602001909190803560001916906020019091905050620010f9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200058757fe5b620005ac60048080356000191690602001909190803590602001909190505062001157565b6040518082815260200191505060405180910390f35b3415620005cb57fe5b620005f960048080356000191690602001909190803590602001909190803590602001909190505062001245565b005b34156200060457fe5b6200060e620012d4565b6040518082815260200191505060405180910390f35b34156200062d57fe5b62000637620012e2565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360008314620006bf575b805182526020831115620006bf5760208201915060208101905060208303925062000699565b505050905090810190601f168015620006ec5780820380516001836020036101000a031916815260200191505b5083810382528581815181526020019150805190602001908083836000831462000737575b805182526020831115620007375760208201915060208101905060208303925062000711565b505050905090810190601f168015620007645780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34156200077e57fe5b620007a36004808035906020019091908035600019169060200190919050506200146b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415620007ee57fe5b62000813600480803590602001909190803560001916906020019091905050620016ca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200085e57fe5b620008766004808035906020019091905050620016e1565b005b34156200088157fe5b620008e96004808035600019169060200190919080359060200190919080359060200190919080356000191690602001909190803590602001909190803590602001909190803590602001909190803590602001909190803590602001909190505062001718565b005b3415620008f457fe5b6200091960048080356000191690602001909190803590602001909190505062001b3e565b60405180888152602001876000191660001916815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390f35b34156200096a57fe5b6200098f60048080356000191690602001909190803590602001909190505062001f98565b6040518082815260200191505060405180910390f35b3415620009ae57fe5b620009c6600480803590602001909190505062002112565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562000a765780601f1062000a4a5761010080835404028352916020019162000a76565b820191906000526020600020905b81548152906001019060200180831162000a5857829003601f168201915b505050505081565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600062000ad183836200146b565b90505b92915050565b600060035490505b90565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600062000b1983836200146b565b90505b92915050565b600062000b30828462000ac3565b73ffffffffffffffffffffffffffffffffffffffff1663200d2ed26000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562000b9c57fe5b6102c65a03f1151562000bab57fe5b5050506040518051905090505b92915050565b600060058281548110151562000bd057fe5b906000526020600020900160005b505490505b919050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562000c825780601f1062000c565761010080835404028352916020019162000c82565b820191906000526020600020905b81548152906001019060200180831162000c6457829003601f168201915b505050505081565b60006000600060006000600060006000600062000ca88a8c62000ac3565b90508073ffffffffffffffffffffffffffffffffffffffff1663200d2ed26000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562000d1757fe5b6102c65a03f1151562000d2657fe5b505050604051805190508173ffffffffffffffffffffffffffffffffffffffff16639d796bdb6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562000d9d57fe5b6102c65a03f1151562000dac57fe5b505050604051805190508273ffffffffffffffffffffffffffffffffffffffff1663548ee6e86000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562000e2357fe5b6102c65a03f1151562000e3257fe5b505050604051805190508373ffffffffffffffffffffffffffffffffffffffff16639028e1e76000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562000ea957fe5b6102c65a03f1151562000eb857fe5b505050604051805190508473ffffffffffffffffffffffffffffffffffffffff16634c616a816000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562000f2f57fe5b6102c65a03f1151562000f3e57fe5b505050604051805190508573ffffffffffffffffffffffffffffffffffffffff1663e5a6b10f6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562000fb557fe5b6102c65a03f1151562000fc457fe5b505050604051805190508673ffffffffffffffffffffffffffffffffffffffff1663d2dcce806000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b15156200103b57fe5b6102c65a03f115156200104a57fe5b505050604051805190508773ffffffffffffffffffffffffffffffffffffffff1663b80777ea6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515620010c157fe5b6102c65a03f11515620010d057fe5b50505060405180519050985098509850985098509850985098505b509295985092959890939650565b60006000600460008581526020019081526020016000206000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508091505b5092915050565b600060006000620011698486620010f9565b91508190508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415620011ae57600292506200123d565b8073ffffffffffffffffffffffffffffffffffffffff1663a80591906000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b15156200121b57fe5b6102c65a03f115156200122a57fe5b5050506040518051905092506200123d565b5b505092915050565b62001251828462000ac3565b73ffffffffffffffffffffffffffffffffffffffff166317bc269b826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1515620012bc57fe5b6102c65a03f11515620012cb57fe5b5050505b505050565b600060058054905090505b90565b620012ec62002138565b620012f662002138565b600060006001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620013b85780601f106200138c57610100808354040283529160200191620013b8565b820191906000526020600020905b8154815290600101906020018083116200139a57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620014585780601f106200142c5761010080835404028352916020019162001458565b820191906000526020600020905b8154815290600101906020018083116200143a57829003601f168201915b505050505091509250925092505b909192565b60006000600460008581526020019081526020016000206000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff161415620016bf57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200150b6200214c565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f08015156200155557fe5b90508073ffffffffffffffffffffffffffffffffffffffff1663c8e2b4dd856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1515620015c357fe5b6102c65a03f11515620015d257fe5b5050508073ffffffffffffffffffffffffffffffffffffffff16629d6e5160016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15156200164157fe5b6102c65a03f115156200165057fe5b50505080600460008681526020019081526020016000206000856000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8091505b5092915050565b6000620016d883836200146b565b90505b92915050565b8060038190555060058054806001018281620016fe91906200215d565b916000526020600020900160005b83909190915055505b50565b600062001726898b62000ac3565b90508073ffffffffffffffffffffffffffffffffffffffff16639295cd8d8a6000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156200179d57fe5b6102c65a03f11515620017ac57fe5b50505060405180519050508073ffffffffffffffffffffffffffffffffffffffff166317bc269b896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15156200182357fe5b6102c65a03f115156200183257fe5b5050508073ffffffffffffffffffffffffffffffffffffffff1663ca6c87a8886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b1515620018a957fe5b6102c65a03f11515620018b857fe5b5050508073ffffffffffffffffffffffffffffffffffffffff1663793740ed876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15156200192757fe5b6102c65a03f115156200193657fe5b5050508073ffffffffffffffffffffffffffffffffffffffff16638b6959b7866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1515620019a557fe5b6102c65a03f11515620019b457fe5b5050508073ffffffffffffffffffffffffffffffffffffffff1663ea8d2720856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151562001a2357fe5b6102c65a03f1151562001a3257fe5b5050508073ffffffffffffffffffffffffffffffffffffffff166350f43b8d846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151562001aa157fe5b6102c65a03f1151562001ab057fe5b5050508073ffffffffffffffffffffffffffffffffffffffff16636804e275836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151562001b1f57fe5b6102c65a03f1151562001b2e57fe5b5050505b50505050505050505050565b60006000600060006000600060006000600062001b5c8a8c620010f9565b91508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141562001bce57614fb16000600060006000600085955060009493929190849450839350829250819150809050985098509850985098509850985062001f8a565b8190508073ffffffffffffffffffffffffffffffffffffffff1663200d2ed26000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562001c3e57fe5b6102c65a03f1151562001c4d57fe5b505050604051805190508173ffffffffffffffffffffffffffffffffffffffff1663548ee6e86000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562001cc457fe5b6102c65a03f1151562001cd357fe5b505050604051805190508273ffffffffffffffffffffffffffffffffffffffff16639028e1e76000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562001d4a57fe5b6102c65a03f1151562001d5957fe5b505050604051805190508373ffffffffffffffffffffffffffffffffffffffff16634c616a816000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562001dd057fe5b6102c65a03f1151562001ddf57fe5b505050604051805190508473ffffffffffffffffffffffffffffffffffffffff1663e5a6b10f6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562001e5657fe5b6102c65a03f1151562001e6557fe5b505050604051805190508573ffffffffffffffffffffffffffffffffffffffff1663d2dcce806000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562001edc57fe5b6102c65a03f1151562001eeb57fe5b505050604051805190508673ffffffffffffffffffffffffffffffffffffffff1663b80777ea6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151562001f6257fe5b6102c65a03f1151562001f7157fe5b5050506040518051905098509850985098509850985098505b505092959891949750929550565b6000600060006000600062001fae8688620010f9565b93508392508373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415620020875762001ff586886200146b565b50620020028688620010f9565b91508190508073ffffffffffffffffffffffffffffffffffffffff16639f7314f96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050600060405180830381600087803b15156200206b57fe5b6102c65a03f115156200207a57fe5b5050506000945062002108565b8273ffffffffffffffffffffffffffffffffffffffff16639f7314f96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050600060405180830381600087803b1515620020eb57fe5b6102c65a03f11515620020fa57fe5b5050506000945062002108565b5b5050505092915050565b6005818154811015156200212257fe5b906000526020600020900160005b915090505481565b602060405190810160405280600081525090565b60405161116080620021b583390190565b81548183558181151162002187578183600052602060002091820191016200218691906200218c565b5b505050565b620021b191905b80821115620021ad57600081600090555060010162002193565b5090565b90560060606040526000600e5534156200001257fe5b60405160208062001160833981016040528080519060200190919050505b602060405190810160405280600081525060206040519081016040528060008152505b81600090805190602001906200006b929190620000f4565b50806001908051906020019062000084929190620000f4565b505b5050620000a781620000af6401000000000262000b72176401000000009004565b5b50620001a3565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013757805160ff191683800117855562000168565b8280016001018555821562000168579182015b82811115620001675782518255916020019190600101906200014a565b5b5090506200017791906200017b565b5090565b620001a091905b808211156200019c57600081600090555060010162000182565b5090565b90565b610fad80620001b36000396000f3006060604052361561020b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680629d6e511461020d578062c9f9f11461022d57806306fdde031461024d5780630902f72f146102e657806310ae4c8d1461030a578063112ab75c146103305780631166b54b1461036457806317bc269b1461039a578063200d2ed2146103ba578063341f141d146103e0578063422347ae1461040657806348870630146104265780634c616a81146104bf57806350f43b8d146104e55780635365f1d314610505578063548ee6e81461052b5780635cbd7ceb146105595780636804e2751461057f5780636cdd94911461059f57806376f75e7f146105bf578063793740ed146105fb57806381483a7e1461061b5780638ad3af68146106415780638b6959b7146106615780639028e1e7146106815780639295cd8d146106a75780639d796bdb146106db5780639f7314f914610701578063a79af2ce14610713578063a805919014610859578063a83754ad1461087f578063b788266c146108a3578063b80777ea146108c3578063c5c0c030146108e9578063c8e2b4dd1461090f578063ca6c87a81461092f578063d2dcce8014610953578063d7e40fa414610979578063df9c36ba1461099f578063e5a6b10f146109cd578063ea8d2720146109f3578063f8fa3eab14610a13578063fdba57fb14610a39575bfe5b341561021557fe5b61022b6004808035906020019091905050610a5f565b005b341561023557fe5b61024b6004808035906020019091905050610a6a565b005b341561025557fe5b61025d610a75565b60405180806020018281038252838181518152602001915080519060200190808383600083146102ac575b8051825260208311156102ac57602082019150602081019050602083039250610288565b505050905090810190601f1680156102d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ee57fe5b610308600480803560001916906020019091905050610b13565b005b341561031257fe5b61031a610b47565b6040518082815260200191505060405180910390f35b341561033857fe5b61034e6004808035906020019091905050610b4d565b6040518082815260200191505060405180910390f35b341561036c57fe5b610398600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b72565b005b34156103a257fe5b6103b86004808035906020019091905050610bb7565b005b34156103c257fe5b6103ca610bc2565b6040518082815260200191505060405180910390f35b34156103e857fe5b6103f0610bc8565b6040518082815260200191505060405180910390f35b341561040e57fe5b6104246004808035906020019091905050610bce565b005b341561042e57fe5b610436610bd9565b6040518080602001828103825283818151815260200191508051906020019080838360008314610485575b80518252602083111561048557602082019150602081019050602083039250610461565b505050905090810190601f1680156104b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c757fe5b6104cf610c77565b6040518082815260200191505060405180910390f35b34156104ed57fe5b6105036004808035906020019091905050610c7d565b005b341561050d57fe5b610515610c88565b6040518082815260200191505060405180910390f35b341561053357fe5b61053b610c8e565b60405180826000191660001916815260200191505060405180910390f35b341561056157fe5b610569610c94565b6040518082815260200191505060405180910390f35b341561058757fe5b61059d6004808035906020019091905050610ca2565b005b34156105a757fe5b6105bd6004808035906020019091905050610cad565b005b34156105c757fe5b6105dd6004808035906020019091905050610cb8565b60405180826000191660001916815260200191505060405180910390f35b341561060357fe5b6106196004808035906020019091905050610cdd565b005b341561062357fe5b61062b610ce8565b6040518082815260200191505060405180910390f35b341561064957fe5b61065f6004808035906020019091905050610cee565b005b341561066957fe5b61067f6004808035906020019091905050610cf9565b005b341561068957fe5b610691610d04565b6040518082815260200191505060405180910390f35b34156106af57fe5b6106c56004808035906020019091905050610d0a565b6040518082815260200191505060405180910390f35b34156106e357fe5b6106eb610d19565b6040518082815260200191505060405180910390f35b341561070957fe5b610711610d1f565b005b341561071b57fe5b610723610d2a565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381038352868181518152602001915080519060200190808383600083146107a8575b8051825260208311156107a857602082019150602081019050602083039250610784565b505050905090810190601f1680156107d45780820380516001836020036101000a031916815260200191505b5083810382528581815181526020019150805190602001908083836000831461081c575b80518252602083111561081c576020820191506020810190506020830392506107f8565b505050905090810190601f1680156108485780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b341561086157fe5b610869610ea7565b6040518082815260200191505060405180910390f35b341561088757fe5b6108a1600480803560001916906020019091905050610ead565b005b34156108ab57fe5b6108c16004808035906020019091905050610ebc565b005b34156108cb57fe5b6108d3610ec7565b6040518082815260200191505060405180910390f35b34156108f157fe5b6108f9610ecd565b6040518082815260200191505060405180910390f35b341561091757fe5b61092d6004808035906020019091905050610ed3565b005b341561093757fe5b610951600480803560001916906020019091905050610ede565b005b341561095b57fe5b610963610eed565b6040518082815260200191505060405180910390f35b341561098157fe5b610989610ef3565b6040518082815260200191505060405180910390f35b34156109a757fe5b6109af610ef9565b60405180826000191660001916815260200191505060405180910390f35b34156109d557fe5b6109dd610eff565b6040518082815260200191505060405180910390f35b34156109fb57fe5b610a116004808035906020019091905050610f05565b005b3415610a1b57fe5b610a23610f10565b6040518082815260200191505060405180910390f35b3415610a4157fe5b610a49610f16565b6040518082815260200191505060405180910390f35b806007819055505b50565b806009819055505b50565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b0b5780601f10610ae057610100808354040283529160200191610b0b565b820191906000526020600020905b815481529060010190602001808311610aee57829003601f168201915b505050505081565b60058054806001018281610b279190610f1c565b916000526020600020900160005b83909190915090600019169055505b50565b60035481565b601681815481101515610b5c57fe5b906000526020600020900160005b915090505481565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b80600b819055505b50565b600b5481565b60065481565b806008819055505b50565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c6f5780601f10610c4457610100808354040283529160200191610c6f565b820191906000526020600020905b815481529060010190602001808311610c5257829003601f168201915b505050505081565b60125481565b806014819055505b50565b600e5481565b60105481565b600060058054905090505b90565b806015819055505b50565b80600a819055505b50565b600581815481101515610cc757fe5b906000526020600020900160005b915090505481565b806011819055505b50565b60075481565b806006819055505b50565b806012819055505b50565b60115481565b600081600f819055505b919050565b600f5481565b60016004819055505b565b610d32610f48565b610d3a610f48565b600060006001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610df85780601f10610dcd57610100808354040283529160200191610df8565b820191906000526020600020905b815481529060010190602001808311610ddb57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e945780601f10610e6957610100808354040283529160200191610e94565b820191906000526020600020905b815481529060010190602001808311610e7757829003601f168201915b505050505091509250925092505b909192565b60045481565b80600d81600019169055505b50565b80600c819055505b50565b60155481565b60085481565b806003819055505b50565b80601081600019169055505b50565b60145481565b600a5481565b600d5481565b60135481565b806013819055505b50565b60095481565b600c5481565b815481835581811511610f4357818360005260206000209182019101610f429190610f5c565b5b505050565b602060405190810160405280600081525090565b610f7e91905b80821115610f7a576000816000905550600101610f62565b5090565b905600a165627a7a7230582058d01435059ee12825473b9f73d47148d70ba3e29a505506080f534b7d33e0130029a165627a7a723058202acc5a9a6a217f696636e1e11a809ca46a86632e3adbd51d59e588943cd61ec400296060604052341561000c57fe5b604051610764380380610764833981016040528080518201919060200180518201919050505b8160009080519060200190610048929190610068565b50806001908051906020019061005f929190610068565b505b505061010d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a957805160ff19168380011785556100d7565b828001600101855582156100d7579182015b828111156100d65782518255916020019190600101906100bb565b5b5090506100e491906100e8565b5090565b61010a91905b808211156101065760008160009055506001016100ee565b5090565b90565b6106488061011c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461005c5780631166b54b146100f5578063488706301461012b578063a79af2ce146101c4575bfe5b341561006457fe5b61006c61030a565b60405180806020018281038252838181518152602001915080519060200190808383600083146100bb575b8051825260208311156100bb57602082019150602081019050602083039250610097565b505050905090810190601f1680156100e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156100fd57fe5b610129600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506103a8565b005b341561013357fe5b61013b6103ed565b604051808060200182810382528381815181526020019150805190602001908083836000831461018a575b80518252602083111561018a57602082019150602081019050602083039250610166565b505050905090810190601f1680156101b65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101cc57fe5b6101d461048b565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360008314610259575b80518252602083111561025957602082019150602081019050602083039250610235565b505050905090810190601f1680156102855780820380516001836020036101000a031916815260200191505b508381038252858181518152602001915080519060200190808383600083146102cd575b8051825260208311156102cd576020820191506020810190506020830392506102a9565b505050905090810190601f1680156102f95780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a05780601f10610375576101008083540402835291602001916103a0565b820191906000526020600020905b81548152906001019060200180831161038357829003601f168201915b505050505081565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104835780601f1061045857610100808354040283529160200191610483565b820191906000526020600020905b81548152906001019060200180831161046657829003601f168201915b505050505081565b610493610608565b61049b610608565b600060006001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105595780601f1061052e57610100808354040283529160200191610559565b820191906000526020600020905b81548152906001019060200180831161053c57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105f55780601f106105ca576101008083540402835291602001916105f5565b820191906000526020600020905b8154815290600101906020018083116105d857829003601f168201915b505050505091509250925092505b909192565b6020604051908101604052806000815250905600a165627a7a72305820a5cf29e0575d2c999134d52bcba577c6000592d5ab18ec791e129f0d967d44a70029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_SETMETAADDRESS = "setMetaAddress";

    public static final String FUNC_GETCLEARCENTERCHECKINFO = "getClearCenterCheckInfo";

    public static final String FUNC_CURRENTCHECKCODE = "currentCheckCode";

    public static final String FUNC_CHECK_INFO_META = "check_info_meta";

    public static final String FUNC_GETISSUEBANKCHECKINFO = "getIssueBankCheckInfo";

    public static final String FUNC_GETORGCHECKSTATUS = "getOrgCheckStatus";

    public static final String FUNC_GETCHECKCODEBYINDEX = "getCheckCodeByIndex";

    public static final String FUNC_ABI = "abi";

    public static final String FUNC_GETALLORGCHECKSTATUS = "getAllOrgCheckStatus";

    public static final String FUNC_GETCHECKCODEINFOBYCHECKCODE = "getCheckCodeInfoByCheckCode";

    public static final String FUNC_GETCHECKCODESTATUS = "getCheckCodeStatus";

    public static final String FUNC_SETORGCHECKSTATUS = "setOrgCheckStatus";

    public static final String FUNC_GETCHECKCODELISTLENGTH = "getCheckCodeListLength";

    public static final String FUNC_GETMETA = "getMeta";

    public static final String FUNC_GETCHECKINFO = "getCheckInfo";

    public static final String FUNC_GETACQUIRERBANKCHECKINFO = "getAcquirerBankCheckInfo";

    public static final String FUNC_SETCHECKCODE = "setCheckCode";

    public static final String FUNC_SETALLORGCHECKSTATUS = "setAllOrgCheckStatus";

    public static final String FUNC_GETRETORGCHECKSTATUS = "getRetOrgCheckStatus";

    public static final String FUNC_SETCHECKCODESTATUS = "setCheckCodeStatus";

    public static final String FUNC_M_CHECK_CODE_LIST = "m_check_code_list";

    public static final Event TRANSRETLOG_EVENT = new Event("transRetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected CheckInfoManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CheckInfoManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CheckInfoManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CheckInfoManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setMetaAddress(String meta) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getClearCenterCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> currentCheckCode() {
        final Function function = new Function(FUNC_CURRENTCHECKCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> check_info_meta() {
        final Function function = new Function(FUNC_CHECK_INFO_META, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> getIssueBankCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOrgCheckStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(FUNC_GETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getCheckCodeByIndex(BigInteger offset) {
        final Function function = new Function(FUNC_GETCHECKCODEBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(offset)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> abi() {
        final Function function = new Function(FUNC_ABI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getAllOrgCheckStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(FUNC_GETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> getCheckCodeInfoByCheckCode(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getCheckCodeStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setOrgCheckStatus(byte[] orgId, BigInteger checkCode, BigInteger retStatus) {
        final Function function = new Function(
                FUNC_SETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getCheckCodeListLength() {
        final Function function = new Function(FUNC_GETCHECKCODELISTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<String, String, String>> getMeta() {
        final Function function = new Function(FUNC_GETMETA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> getCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getAcquirerBankCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCheckCode(BigInteger check_code) {
        final Function function = new Function(
                FUNC_SETCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setAllOrgCheckStatus(byte[] orgId, BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_SETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getRetOrgCheckStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(FUNC_GETRETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setCheckCodeStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_check_code_list(BigInteger param0) {
        final Function function = new Function(FUNC_M_CHECK_CODE_LIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<TransRetLogEventResponse> getTransRetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSRETLOG_EVENT, transactionReceipt);
        ArrayList<TransRetLogEventResponse> responses = new ArrayList<TransRetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransRetLogEventResponse typedResponse = new TransRetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oper = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.check_code = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransRetLogEventResponse> transRetLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransRetLogEventResponse>() {
            @Override
            public TransRetLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSRETLOG_EVENT, log);
                TransRetLogEventResponse typedResponse = new TransRetLogEventResponse();
                typedResponse.log = log;
                typedResponse.oper = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.check_code = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransRetLogEventResponse> transRetLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSRETLOG_EVENT));
        return transRetLogEventFlowable(filter);
    }

    @Deprecated
    public static CheckInfoManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CheckInfoManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CheckInfoManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CheckInfoManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CheckInfoManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CheckInfoManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CheckInfoManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CheckInfoManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class TransRetLogEventResponse {
        public Log log;

        public String oper;

        public BigInteger status;

        public BigInteger check_code;
    }
}
